---
import Target from '@components/target.svg';
---

<style>
    input, button {
        font: inherit;
        border: 0;
        background: transparent;
        padding: 0;
    }

    button {
        cursor: pointer;
    }

    form {
        display: flex;
        gap: 8px;
        align-items: end;
        flex-wrap: wrap;
    }

    form > * {
        flex-grow: 1;
        flex-shrink: 1;
    }

    label {
        font-weight: bolder;
    }

    #field {
        display: flex;
        border: 1px solid var(--accent-color);
        margin-block-start: 8px;
        border-radius: 4px;
    }

    input {
        flex: 1;
        padding: 8px;
        text-overflow: ellipsis;
    }

    input ~ button {
        padding: 8px;
        align-items: center;
        justify-content: center;
        font-weight: bolder;
        transition: background-color .218s ease;
    }

    input ~ button:hover {
        background-color: color-mix(in oklch, var(--accent-color), transparent 90%);
    }

    input ~ button:not(:has(*)) {
        padding: 8px 16px;
    }

    input:not(:placeholder-shown) ~ #search,
    input:placeholder-shown ~ #geolocation {
        display: inline-flex;
    }

    input:not(:placeholder-shown) ~ #geolocation,
    input:placeholder-shown ~ #search {
        display: none;
    }

    button[type="submit"] {
        padding: 8px 16px;
        border: 1px solid transparent;
        border-radius: 4px;
        font-weight: bolder;
        background-color: var(--accent-color);
        color: color(from var(--accent-color) xyz
            round(up, min(1, max(0, 0.18 - y)))
            round(up, min(1, max(0, 0.18 - y)))
            round(up, min(1, max(0, 0.18 - y)))
        );
    }

    button[type="submit"][data-coords]:after {
        content: " for " attr(data-coords);
    }

    #error:empty {
        display: none;
    }

    #results {
        list-style: none;
        margin: 0;
        padding: 0;
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        gap: 8px;
    }

    #results:not(:empty) {
        margin-block-start: 16px;
    }

    #results :global(button) {
        display: flex;
        flex-direction: column;
        padding: 8px;
        gap: 8px;
        text-align: start;
        border: 1px solid var(--accent-color);
        border-radius: 4px;
        cursor: pointer;
        background: transparent;
        font: inherit;
        transition: background-color .218s ease;
    }

    #results :global(button:hover) {
        background-color: color-mix(in oklch, var(--accent-color), transparent 90%);
    }

    #results :global(button > *) {
        pointer-events: none;
    }

    #results :global(li) {
        display: contents;
    }

    #results :global(small) {
        margin-block-start: auto;
    }

    form[aria-busy="true"] #field {
        background-image: repeating-linear-gradient(45deg,
            var(--accent-color),
            var(--accent-color) 25%,
            color-mix(in oklch,var(--accent-color),transparent 25%) 25%,
            color-mix(in oklch,var(--accent-color),transparent 25%) 50%
        );
        color: transparent;
        background-size: 1.5em 1.5em;
        background-position: 1.5em 0;
        animation: standby 1s linear infinite paused;
    
        & > * {
            opacity: 0;
            pointer-events: none;
        }
    }

    @keyframes standby {
        to { background-position: 0 0; }
    }

    @media (prefers-reduced-motion: no-preference) {
        form[aria-busy="true"] #field {
            animation-play-state: running;
        }
    }
</style>

<form id="form" action="/feeds" method="post" autocomplete="off">
    <div>
        <label for="input">Location search</label>
        <div id="field">
            <input type="text" id="input" placeholder="New York, NY"/>
            <button id="search" type="button">Search</button>
            <button
                id="geolocation"
                type="button"
                title="Use geolocation"
                aria-label="Use geolocation">
                <Target/>
            </button>
        </div>
        <p id="error" aria-live="polite"></p>
    </div>
    <input type="hidden" name="lat" value="" id="lat"/>
    <input type="hidden" name="lon" value="" id="lon"/>
    <input type="hidden" name="tzName" value="" id="tzName"/>
    <input type="hidden" name="tzOffset" value="" id="tzOffset"/>
    <input type="hidden" name="tzOffsetString" value="" id="tzOffsetString"/>
    <input type="hidden" name="tzAbbr" value="" id="tzAbbr"/>
    <button type="submit" id="submit">Get RSS feed</button>
</form>
<ul id="results"></ul>

<script>

    const $geolocation = document.getElementById('geolocation') as HTMLButtonElement;
    const $input = document.getElementById('input') as HTMLInputElement;
    const $search = document.getElementById('search') as HTMLButtonElement;
    const $results = document.getElementById('results') as HTMLDataListElement;
    const $form = document.getElementById('form') as HTMLFormElement;
    const $error = document.getElementById('error') as HTMLParagraphElement;
    const $submit = document.getElementById('submit') as HTMLButtonElement;

    $geolocation.addEventListener('click', onGeolocation);
    $search.addEventListener('click', onSearch);

    function onGeolocation() {
        if ($form.getAttribute('aria-busy') === 'true') return;
        $form.setAttribute('aria-busy', 'true');
        $error.textContent = '';


        if (!navigator.geolocation) {
            $form.setAttribute('aria-busy', 'false');
            $error.textContent = 'Geolocation is not supported by your browser.';
            return;
        }

        navigator.geolocation.getCurrentPosition(getCurrentPosition);
    }

    async function onSearch() {
        if ($form.getAttribute('aria-busy') === 'true') return;
        $form.setAttribute('aria-busy', 'true');
        $error.textContent = '';

        try {
            const results = await onQuery($input.value.trim());
            $results.innerHTML = results.map(renderOption).join('');
            $results.querySelectorAll('button').forEach((button, index) => {
                button.addEventListener('click', () => {
                    const result = results[index];
                    $input.value = result.label;
                    setFormData(result);
                });
            });
        } catch (error) {
            console.error('Error fetching search results:', error);
            $error.textContent = 'Failed to fetch search results. Please try again later.';
        }
    }

    function renderOption(result: any) {
        return (`
            <li>
                <button type="button">
                    <strong>${result.label}</strong>
                    <small>${result.lat}, ${result.lon}</small>
                </button>
            </li>
        `);
    }

    function setFormData(data: Record<string, any>) {
        const { lat, lon } = data;
        $submit.dataset.coords = `${lat}, ${lon}`;
        $form.action = `/api/feeds/${lat}_${lon}`;
        Object.entries(data).forEach(([key, value]) => {
            const $input = document.getElementById(key) as HTMLInputElement | null;
            if ($input) {
                $input.value = value;
            }
        });
    }

    async function getCurrentPosition({ coords }: GeolocationPosition) {
        const { latitude: lat, longitude: lon } = coords;
        const [result] = await onQuery(`${lat}+${lon}`);
        $input.value = result.label;
        setFormData(result);
    }

    async function onQuery(q: string) {

        if (!q) {
            $form.setAttribute('aria-busy', 'false');
            $error.textContent = 'Search query cannot be empty.';
            return [];
        }

        const url = new URL('/api/location', window.location.origin);
        url.search = new URLSearchParams({ q }).toString();

        const res = await fetch(url.toString());
        $form.setAttribute('aria-busy', 'false');
        if (!res.ok) {
            $error.textContent = 'An error occurred while fetching data.';
        }
        const data = await res.json();
        if (data.error) {
            $error.textContent = data.error;
            return [];
        }

        return data;
    }


</script>